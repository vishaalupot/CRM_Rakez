@model CRM_Raviz.Models.RecordData

@{
    ViewBag.Title = "CRMPPF";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <title>Master Report</title>
    <style>
        /* CSS for styling */
        .heading {
            font-family: 'Jaldi', sans-serif;
            font-size: 38px;
            margin-bottom: 20px;
            text-align: left;
            font-weight: 600;
            color: #082948;
        }

        .form-control {
            width: 200px;
        }

        #endDateContainer {
            display: none;
        }

        .container1 {
            display: flex;
            align-items: flex-start;
            margin-bottom: 20px;
            flex-direction: column;
        }

        .date-input {
            margin-right: 10px;
        }

        .body {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .submit-button {
            margin-top: 20px;
            background: #082948;
            color: white;
        }

            .submit-button:hover {
                margin-top: 20px;
                background: #082948;
                color: white;
            }
    </style>
</head>
<body>
    <h1 class="heading">Master Report</h1>

    <div class="container1" style="display: flex; flex-wrap: wrap;">
        @using (Html.BeginForm("DownloadRecordCases", "Home", FormMethod.Get))
        {
           <div class="row space">
               @{
                   // Retrieve the AgentNames values from the ViewBag
                   var agentNames = ViewBag.AgentNames as List<string>;
               }

               <div class="form-group col-sm-12 col-md-4 col-xl-3">
                   <div class="row">
                       <div class="col-md-12">
                           @Html.Label("DerbyBatch", htmlAttributes: new { @class = "control-label label" })
                       </div>
                   </div>
                   <div class="col-md-10">
                       @Html.DropDownList("DerbyBatch",
                           new SelectList(ViewBag.allbatches),
                           "Select Derby Batch",
                           new { @class = "form-control box dropdown-styled", id = "DerbyBatch" })
                   </div>
               </div>

               <div class="form-group col-sm-12 col-md-4 col-xl-3">
                   <div class="row">
                       <div class="col-md-12">
                           @Html.Label("Agents", htmlAttributes: new { @class = "control-label label" })
                       </div>
                   </div>
                   <div class="col-md-10">
                       @Html.DropDownList("Users", new SelectList(agentNames.Select(x => new { Text = x, Value = x }), "Value", "Text"), "Select User Role", new { @class = "form-control box dropdown-styled", id = "SubDispo" })
                   </div>
               </div>





               <div class="form-group col-sm-12 col-md-4 col-xl-3">
                   <div class="row">
                       <div class="col-md-12">
                           @Html.Label("Calltype", htmlAttributes: new { @class = "control-label label" })
                       </div>
                   </div>
                   <div class="col-md-10">
                       @Html.DropDownListFor(model => model.CallType, new List<SelectListItem>
                       {
                           new SelectListItem { Text = "-", Value = "-" },
                           new SelectListItem { Text = "OUTBOUND", Value = "OUTBOUND" },
                           new SelectListItem { Text = "INBOUND", Value = "INBOUND" },
                           new SelectListItem { Text = "EMAIL UPDATE", Value = "EMAIL UPDATE" }
                       }, new { @class = "form-control box dropdown-styled" })
                       @Html.ValidationMessageFor(model => model.CallType, "", new { @class = "text-danger" })
                   </div>
               </div>

               <div class="form-group col-sm-12 col-md-3 col-xl-3" id="firstDropdown">
                   <div class="row">
                       <div class="col-md-12">
                           @Html.Label("Disposition", htmlAttributes: new { @class = "control-label label" })
                       </div>
                   </div>
                   <div class="col-md-10">
                       @Html.DropDownListFor(model => model.Disposition, new List<SelectListItem>
                       {
                           new SelectListItem { Text = "-", Value = "-" },
                           new SelectListItem { Text = "QUOTATION SENT", Value = "QUOTATION SENT" },
                           new SelectListItem { Text = "QUOTATION REQUESTED", Value = "QUOTATION REQUESTED" },
                           new SelectListItem { Text = "ACCOUNT EXCLUDED", Value = "ACCOUNT EXCLUDED" },
                           new SelectListItem { Text = "CALLBACK LANGUAGE", Value = "CALLBACK LANGUAGE" },
                           new SelectListItem { Text = "BILL DISPUTE", Value = "BILL DISPUTE" },
                           new SelectListItem { Text = "CALLBACK", Value = "CALLBACK" },
                           new SelectListItem { Text = "BILL DISPUTE REFUSE TO PAY", Value = "BILL DISPUTE REFUSE TO PAY" },
                           new SelectListItem { Text = "CUSTOMER DECEASED", Value = "CUSTOMER DECEASED" },
                           new SelectListItem { Text = "CUSTOMER HUNG UP", Value = "CUSTOMER HUNG UP" },
                           new SelectListItem { Text = "CUSTOMER OUT OF COUNTRY", Value = "CUSTOMER OUT OF COUNTRY" },
                           new SelectListItem { Text = "BILL DISPUTE", Value = "BILL DISPUTE" },
                           new SelectListItem { Text = "DE-REGISTRATION", Value = "DE-REGISTRATION" },
                           new SelectListItem { Text = "DE-REGISTRATION DONE", Value = "DE-REGISTRATION DONE" },
                           new SelectListItem { Text = "DO NOT CALL", Value = "DO NOT CALL" },
                           new SelectListItem { Text = "FOLLOW UP", Value = "FOLLOW UP" },
                           new SelectListItem { Text = "INVALID NUMBER", Value = "INVALID NUMBER" },
                           new SelectListItem { Text = "LINE BUSY", Value = "LINE BUSY" },
                           new SelectListItem { Text = "PAYMENT INSTALLMENT APPROVED", Value = "PAYMENT INSTALLMENT APPROVED" },
                           new SelectListItem { Text = "PAYMENT INSTALLMENT REQUEST", Value = "PAYMENT INSTALLMENT REQUEST" },
                           new SelectListItem { Text = "PAYMENT MADE", Value = "PAYMENT MADE" },
                           new SelectListItem { Text = "PAYMENT MISSING", Value = "PAYMENT MISSING" },
                           new SelectListItem { Text = "PAYMENT REMINDER", Value = "PAYMENT REMINDER" },
                           new SelectListItem { Text = "PROMISE TO PAY", Value = "PROMISE TO PAY" },
                           new SelectListItem { Text = "RECALLED", Value = "RECALLED" },
                           new SelectListItem { Text = "REFUSE TO DE-REGISTER", Value = "REFUSE TO DE-REGISTER" },
                           new SelectListItem { Text = "REFUSE TO RENEW", Value = "REFUSE TO RENEW" },
                           new SelectListItem { Text = "RENEWAL DONE", Value = "RENEWAL DONE" },
                           new SelectListItem { Text = "RENEWAL INQUIRY", Value = "RENEWAL INQUIRY" },
                           new SelectListItem { Text = "RINGING", Value = "RINGING" },
                           new SelectListItem { Text = "STATEMENT OF ACCOUNT REQUEST", Value = "STATEMENT OF ACCOUNT REQUEST" },
                           new SelectListItem { Text = "SWITCH OFF", Value = "SWITCH OFF" },
                           new SelectListItem { Text = "THIRD PARTY CALLBACK", Value = "THIRD PARTY CALLBACK" },
                           new SelectListItem { Text = "THIRD PARTY CONTACT", Value = "THIRD PARTY CONTACT" },
                           new SelectListItem { Text = "THIRD PARTY CTC INFO UPDATE", Value = "THIRD PARTY CTC INFO UPDATE" }
                       }, new { @class = "form-control box dropdown-styled" })
                       @Html.ValidationMessageFor(model => model.Disposition, "", new { @class = "text-danger" })
                   </div>
               </div>

               <div class="form-group col-sm-12 col-md-3 col-xl-3" id="secondDropdown" style="display:none;">
                   <div class="row">
                       <div class="col-md-12">
                           @Html.Label("SubDisposition", htmlAttributes: new { @class = "control-label label" })
                       </div>
                   </div>
                   <div class="col-md-10">
                       @Html.DropDownListFor(model => model.SubDisposition, new List<SelectListItem>
                       {
                           new SelectListItem {  Text = "-", Value = "-"  },
                           new SelectListItem { Text = "English", Value = "English" },
                           new SelectListItem { Text = "Arabic", Value = "Arabic" },
                           new SelectListItem { Text = "Hindi", Value = "Hindi" },
                       }, new { @class = "form-control box dropdown-styled" })
                       @Html.ValidationMessageFor(model => model.SubDisposition, "", new { @class = "text-danger" })
                   </div>
               </div>

               <div class="form-group col-sm-12 col-md-3 col-xl-" id="callbackDateTime" style="display:none;">
                   <div class="row">
                       <div class="col-md-12">
                           @Html.LabelFor(model => model.CallbackTime, "Callback", htmlAttributes: new { @class = "control-label label" })
                       </div>
                   </div>
                   <div class="col-md-10">
                       @Html.TextBoxFor(model => model.CallbackTime, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control box", type = "datetime-local", pattern = @"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}", title = "Please enter a valid datetime in the format yyyy-MM-ddTHH:mm" })
                       <!-- You can adjust the formatting and attributes as needed -->
                       @Html.ValidationMessageFor(model => model.CallbackTime, "", new { @class = "text-danger" })
                   </div>
               </div>


               <div class="form-group col-sm-12 col-md-12 col-xl-12">
                   <div class="row">
                       <div class="col-md-12">
                           @Html.Label("Start Date", htmlAttributes: new { @class = "control-label label" })
                       </div>
                   </div>
                   <input type="date" class="form-control box dropdown-styled date-input" placeholder="Select a date" name="specificDate">
               </div>

               <div>
                   <label>
                       <input type="checkbox" id="showEndDate" name="showEndDate" /> Show End Date
                   </label>
               </div>

               <div id="endDateContainer">
                   <div class="row">
                       <div class="col-md-12">
                           @Html.Label("End Date", htmlAttributes: new { @class = "control-label label" })
                       </div>
                   </div>
                   <input type="date" class="form-control box dropdown-styled date-input" placeholder="Select end date" name="endDate">
               </div>
           </div>
            <button type="submit" class="btn submit-button" style="margin-right: 10px">Submit</button>


        }
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>

        function validateSelections() {
            var disposition = $('#Disposition').val();
            var callType = $('#CallType').val();

            // Check if both dropdowns are required to be selected
            if ((disposition == 'CALLBACK' && $('#CallBackDateTime').val() == '01/01/2000 12:00 AM') ||
                (disposition == 'CALLBACK LANGUAGE' && $('#SubDisposition').val() == '-') ||
                ((callType == 'OUTBOUND' || callType == 'INBOUND') && $('#Disposition').val() == '-') ||
                (callType == 'EMAIL UPDATE' && $('#Dropdown').val() == '-')) {
                // If one or both dropdowns are not selected, show SweetAlert
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please make sure to select all required options before submitting!',
                });
                return false; // Prevent form submission
            }
            return true; // Proceed with form submission
        }

        $(document).ready(function () {

            $('#firstDropdown').hide();
            $('#Dropdown').hide();
            // Function to show or hide the second dropdown based on the selection of the first dropdown
            $('#Disposition').change(function () {
                var selectedValue = $(this).val();
                if (selectedValue === 'CALLBACK LANGUAGE') { // Replace 'YOUR_TRIGGER_OPTION' with the value that should trigger showing the second dropdown
                    $('#secondDropdown').show(); // Show the second dropdown
                } else {
                    $('#secondDropdown').hide(); // Hide the second dropdown
                }
            });
            // Function to show or hide the second dropdown based on the selection of the first dropdown
            $('#CallType').change(function () {
                var selectedValue = $(this).val();
                if (selectedValue === 'OUTBOUND' || selectedValue === 'INBOUND') { // Replace 'YOUR_TRIGGER_OPTION' with the value that should trigger showing the second dropdown
                    $('#firstDropdown').show(); // Show the second dropdown
                    $('#Dropdown').hide(); // Show the second dropdown
                    $('#Dialed').show();
                    $('#Email').hide();

                } else if (selectedValue === 'EMAIL UPDATE') {
                    $('#firstDropdown').hide(); // Hide the second dropdown
                    $('#Dropdown').show(); // Hide the second dropdown
                    $('#Dialed').hide();
                    $('#Email').show();

                }
            });
        });


    </script>

    <script>
        $(document).ready(function () {
            // Function to show or hide the second dropdown based on the selection of the first dropdown
            $('#Disposition').change(function () {
                var selectedValue = $(this).val();
                if ((selectedValue === 'CALLBACK LANGUAGE') || (selectedValue === 'CALLBACK')) { // Replace 'YOUR_TRIGGER_OPTION' with the value that should trigger showing the second dropdown
                    $('#callbackDateTime').show(); // Show the second dropdown
                } else {
                    $('#callbackDateTime').hide(); // Hide the second dropdown
                }
            });


            $('#Form').submit(function (event) {
                // Validate dropdown selections before submitting
                if (!validateSelections()) {
                    event.preventDefault(); // Prevent form submission if validation fails
                }
            });
        });


    </script>
    <script>
        $(document).ready(function () {
            $('#showEndDate').change(function () {
                $('#endDateContainer').toggle();
            });
        });
    </script>
</body>
</html>
