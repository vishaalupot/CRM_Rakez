@using Microsoft.AspNet.Identity
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model  CRM_Raviz.Models.RecordData
@using CRM_Raviz.Models

<head>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")

    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Jaldi&display=swap');

        .heading {
            color: #082948;
            font-size: 40px;
            font-family: 'Jaldi', sans-serif;
            text-align: left;
            padding-left: 10px;
            font-weight: 600;
        }

        .segment-text {
            color: darkred;
            font-size: 30px;
            font-family: 'Jaldi', sans-serif;
            text-align: left;
            padding-left: 10px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }

        .label {
            color: #857F7F;
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            font-size: 15px;
            white-space: nowrap !important;
            width: 100px;
            white-space: nowrap;
        }

        .box {
            background-color: WHITE;
            border-style: none;
            width: 300px;
            height: 30px;
            margin-top: 7px;
            margin-bottom: 10px;
            border: 1px groove #569F9F;
            font-weight: 600 !important;
            font-size: 14px !important;
        }

        input, select, textarea {
            background-color: WHITE;
            font-size: 20px;
            max-width: 1000px;
        }

        .SubBtn {
            background-color: #082948 !important;
            color: white !important;
            font-family: 'Jaldi', sans-serif !important;
            font-size: 20px !important;
            border-radius: 4px !important;
        }

            .SubBtn:hover {
                background-color: #024444;
                color: white;
            }

        button.btn {
            color: white;
            font-weight: 500;
        }

        .body {
            display: flex;
            flex-direction: row;
        }



        .container.body-content {
            margin: 10px;
        }

        .para {
            font-family: 'Jaldi', sans-serif;
            text-align: left;
            padding-left: 10px;
        }

        table {
            width: 100%;
        }

            table tr td {
                font-family: 'Jaldi', sans-serif;
                font-size: 16px;
                border: 1px solid black;
                border-radius: 8px;
            }

            table tr th {
                border-radius: 8px;
            }

        td, th {
            padding: 8px;
            text-align: left;
            font-weight: 600;
            border-radius: 8px;
        }

        @@keyframes blink {
            0% {
                opacity: 1;
            }

            50% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        .blink {
            animation: blink 1s infinite;
        }


        input, select, textarea {
            max-width: 1000px !important;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

    <script>

        function validateSelections() {
            var disposition = $('#Disposition').val();
            var callType = $('#CallType').val();

            // Check if both dropdowns are required to be selected
            if ((disposition == 'CALLBACK' && $('#CallBackDateTime').val() == '01/01/2000 12:00 AM') ||
                (disposition == 'CALLBACK LANGUAGE' && $('#SubDisposition').val() == '-') ||
                ((callType == 'OUTBOUND' || callType == 'INBOUND') && $('#Disposition').val() == '-') ||
                (callType == 'EMAIL UPDATE' && $('#Dropdown').val() == '-')) {
                // If one or both dropdowns are not selected, show SweetAlert
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please make sure to select all required options before submitting!',
                });
                return false; // Prevent form submission
            }
            return true; // Proceed with form submission
        }

        $(document).ready(function () {

            $('#firstDropdown').hide();
            $('#Dropdown').hide();
            // Function to show or hide the second dropdown based on the selection of the first dropdown
            $('#Disposition').change(function () {
                var selectedValue = $(this).val();
                if (selectedValue === 'CALLBACK LANGUAGE') { // Replace 'YOUR_TRIGGER_OPTION' with the value that should trigger showing the second dropdown
                    $('#secondDropdown').show(); // Show the second dropdown
                } else {
                    $('#secondDropdown').hide(); // Hide the second dropdown
                }
            });
            // Function to show or hide the second dropdown based on the selection of the first dropdown
            $('#CallType').change(function () {
                var selectedValue = $(this).val();
                if (selectedValue === 'OUTBOUND' || selectedValue === 'INBOUND') { // Replace 'YOUR_TRIGGER_OPTION' with the value that should trigger showing the second dropdown
                    $('#firstDropdown').show(); // Show the second dropdown
                    $('#Dropdown').hide(); // Show the second dropdown
                    $('#Dialed').show();
                    $('#Email').hide();

                } else if (selectedValue === 'EMAIL UPDATE') {
                    $('#firstDropdown').hide(); // Hide the second dropdown
                    $('#Dropdown').show(); // Hide the second dropdown
                    $('#Dialed').hide();
                    $('#Email').show();

                }
            });
        });


    </script>

    <script>
        $(document).ready(function () {
            // Function to show or hide the second dropdown based on the selection of the first dropdown
            $('#Disposition').change(function () {
                var selectedValue = $(this).val();
                if ((selectedValue === 'CALLBACK LANGUAGE') || (selectedValue === 'CALLBACK')) { // Replace 'YOUR_TRIGGER_OPTION' with the value that should trigger showing the second dropdown
                    $('#callbackDateTime').show(); // Show the second dropdown
                } else {
                    $('#callbackDateTime').hide(); // Hide the second dropdown
                }
            });


            $('#Form').submit(function (event) {
                // Validate dropdown selections before submitting
                if (!validateSelections()) {
                    event.preventDefault(); // Prevent form submission if validation fails
                }
            });
        });


    </script>



    <script>
        $(document).ready(function () {
            // Function to update the Change Status textarea
            function updateChangeStatus(changedElement) {
                var changeStatusText = ""; // Initialize changeStatusText

                // If the textarea is empty, set its value to the result of User.Identity.GetUserName() as the initial value
                if ($("#ChangeStatus").val().trim() === "") {
                    changeStatusText = $("#username").val() + " | ";
                } else {
                    changeStatusText = $("#ChangeStatus").val();
                }

                // Update the changeStatusText based on the type of the changedElement
                if (changedElement.is("input[type='text']")) {
                    var textBoxName = changedElement.attr("name");
                    var textBoxValue = changedElement.val();
                    changeStatusText += textBoxName + " : " + textBoxValue + " | ";
                } else if (changedElement.is("select")) {
                    var dropDownName = changedElement.attr("name");
                    var dropDownValue = changedElement.find("option:selected").text();
                    changeStatusText += dropDownName + " : " + dropDownValue + " | ";
                } else if (changedElement.is("#Comments")) {
                    var commentsValue = changedElement.val();
                    changeStatusText += "Comments : " + commentsValue + " | ";
                }

                // Update the Change Status textarea with the generated text
                $("#ChangeStatus").val(changeStatusText);
            }

            // Call the updateChangeStatus function when a textbox, dropdown, or comments textarea loses focus
            $("input[type='text'], select, #Comments").on("change", function () {
                updateChangeStatus($(this));
            });

            // Call the updateChangeStatus function on page load to initialize the Change Status textarea
            updateChangeStatus($("#ChangeStatus"));

            // Set the initial value of the Change Status textarea to empty
            $("#ChangeStatus").val("");
        });



    </script>


    <script type="text/javascript">

      $(document).ready(function ()
      {

       searchCases2();


      })


      function searchCases2() {
          console.log("Button clicked");
          var query = $("#AccountNo").val();
          var url = '@Url.Action("_History", "Home")';
          url = url.replace("_query_", query);
          console.log(url);
         /* alert(query)*/
          $.ajax({
              url: url,
              data: { query: query },
              type: "Post",
              success: function (result) {

                  $("#History").html(result);
              },
              error: function (e) {
                  alert("Error fetching search results");
              }
          });
      }

    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var dropdown = document.getElementById('CallType');
            var dropdown2 = document.getElementById('Disposition');
            var dropdown = document.getElementById('CallType');
            if (dropdown) {
                dropdown.selectedIndex = 0;
            }
            if (dropdown2) {
                dropdown2.selectedIndex = 0;
            }
        });
    </script>



    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
</head>
<div class="body">
    <div>
        @using (Html.BeginForm("RealEditAllocation", "Home", null, FormMethod.Post, new { @class = "form-control", id = "Form", @style = "border: none !important;" }))
        {
            @Html.AntiForgeryToken()
        <div class="row space">

            <div style="display:flex; flex-direction: row;">
                <div class="heading">
                    Update Record -
                </div>
                <div class="segment-text @(Model.Segments == "Bounced Cheque and Renewal" ? "blink" : "")">
                    @Html.DisplayFor(model => model.Segments)
                </div>
            </div>


            <input type="hidden" id="username" value="@User.Identity.GetUserName()" />

            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.AgentsName, new { Value = User.Identity.GetUserName() })
            @*@Html.HiddenFor(model => model.AccountNo)*@

            <br />

            <div class="form-group  col-sm-12 col-md-3 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Agent, "Agent", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.Agent, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-3 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.AccountNo, "Account Number", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.AccountNo, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-3 col-xl-4">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerName, "Customer Name", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.CustomerName, new { @class = "form-control box", @readonly = true, @style = "width: 400px;" })
                </div>
            </div>



            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Contact_Person, "Contact Person", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.Contact_Person, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BCheque, "Bounced Cheque Amount", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.BCheque, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BCheque_P, "Bounced Cheque Penalties", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.BCheque_P, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.IPTelephone_Billing, "IP Telephone Billing", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.IPTelephone_Billing, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Utility_Billing, "Utility Billing", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.Utility_Billing, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Others, "Others", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.Others, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.OS_Billing, "O/S Balance", htmlAttributes: new { @class = "control-label label", @style = "color:darkred !important;" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.OS_Billing, new { @class = "form-control box", @readonly = true })
                </div>
            </div>


            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.License_expiry, "License Expiry", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @{
                        // Extract the date part from the License_expiry string
                        string datePart = string.Empty;
                        if (!string.IsNullOrEmpty(Model.License_expiry) && Model.License_expiry.Length >= 10)
                        {
                            datePart = Model.License_expiry.Substring(0, 10);
                        }
                    }

                    @Html.TextBox("License_expiry", datePart, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ExpectedRenewalFee, "Renewal Fee", htmlAttributes: new { @class = "control-label label", @style = "color:darkred !important;" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.ExpectedRenewalFee, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.SRNumber, "Last SR Number", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.SRNumber, new { @class = "form-control box", @readonly = true })
                </div>
            </div>
            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.EmployeeVisaQuota, "Employee Visa Quota", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.EmployeeVisaQuota, new { @class = "form-control box", @readonly = true })
                </div>
            </div>
            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.EmployeeVisaUtilized, "Employee Visa Utilized", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.EmployeeVisaUtilized, new { @class = "form-control box", @readonly = true })
                </div>
            </div>
            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProjectBundleName, "Product Bundle Name", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.ProjectBundleName, new { @class = "form-control box", @readonly = true })
                </div>
            </div>
            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.LicenseType, "License Type", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.LicenseType, new { @class = "form-control box", @readonly = true })
                </div>
            </div>
            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.FacilityType, "Facility Type", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.FacilityType, new { @class = "form-control box", @readonly = true })
                </div>
            </div>
            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.NoYears, "No of Years", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.NoYears, new { @class = "form-control box", @readonly = true })
                </div>
            </div>
            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DerbyBatch, "Derby Batch", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.DerbyBatch, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Nationality, "Nationality", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.Nationality, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div style=" padding: 20px 10px;">
                @{
                    var bouncedRecords = ViewBag.Bounce as List<BouncedRecord>;
                }
                <div>Bounced Details</div>
                <table>
                    <tr>
                        <td class="tableHead">Reason Code</td>
                        <td class="tableHead">Text</td>
                        <td class="tableHead">Date Bounced</td>
                        <td class="tableHead">Cheque Number</td>
                        <td class="tableHead">Cheque Date</td>
                        <td class="tableHead">Total Amount</td>
                    </tr>

                    @foreach (var item in bouncedRecords)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.ReasonCode, new { @class = "tablecont" })</td>
                            <td>@Html.DisplayFor(modelItem => item.Text, new { @class = "tablecont" })</td>
                            <td>@(item.DateBounced.HasValue ? item.DateBounced.Value.ToShortDateString() : "")</td>
                            <td>@Html.DisplayFor(modelItem => item.ChequeNumber, new { @class = "tablecont" })</td>
                            <td>@Html.DisplayFor(modelItem => item.ChequeDate, new { @class = "tablecont" })</td>
                            <td>@Html.DisplayFor(modelItem => item.TotalAmount, new { @class = "tablecont" })</td>

                        </tr>
                    }
                </table>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CallType, "Call Type", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.CallType, new List<SelectListItem>
                    {
                        new SelectListItem { Text = "-", Value = "-" },
                        new SelectListItem { Text = "OUTBOUND", Value = "OUTBOUND" },
                        new SelectListItem { Text = "INBOUND", Value = "INBOUND" },
                        new SelectListItem { Text = "EMAIL UPDATE", Value = "EMAIL UPDATE" }
                    }, new { @class = "form-control box dropdown-styled" })
                    @Html.ValidationMessageFor(model => model.CallType, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group  col-sm-12 col-md-4 col-xl-3" id="firstDropdown">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Disposition, "Disposition", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Disposition, new List<SelectListItem>
                    {
                      new SelectListItem { Text = "-", Value = "-" },
                      new SelectListItem { Text = "ACCOUNT EXCLUDED", Value = "ACCOUNT EXCLUDED" },
                      new SelectListItem { Text = "CALLBACK LANGUAGE", Value = "CALLBACK LANGUAGE" },
                      new SelectListItem { Text = "BILL DISPUTE", Value = "BILL DISPUTE" },
                      new SelectListItem { Text = "CALLBACK", Value = "CALLBACK" },
                      new SelectListItem { Text = "BILL DISPUTE REFUSE TO PAY", Value = "BILL DISPUTE REFUSE TO PAY" },
                      new SelectListItem { Text = "CUSTOMER DECEASED", Value = "CUSTOMER DECEASED" },
                      new SelectListItem { Text = "CUSTOMER HUNG UP", Value = "CUSTOMER HUNG UP" },
                      new SelectListItem { Text = "CUSTOMER OUT OF COUNTRY", Value = "CUSTOMER OUT OF COUNTRY" },
                      new SelectListItem { Text = "BILL DISPUTE", Value = "BILL DISPUTE" },
                      new SelectListItem { Text = "DE-REGISTRATION", Value = "DE-REGISTRATION" },
                      new SelectListItem { Text = "DE-REGISTRATION DONE", Value = "DE-REGISTRATION DONE" },
                      new SelectListItem { Text = "DO NOT CALL", Value = "DO NOT CALL" },
                      new SelectListItem { Text = "FOLLOW UP", Value = "FOLLOW UP" },
                      new SelectListItem { Text = "INVALID NUMBER", Value = "INVALID NUMBER" },
                      new SelectListItem { Text = "LINE BUSY", Value = "LINE BUSY" },
                      new SelectListItem { Text = "PAYMENT INSTALLMENT APPROVED", Value = "PAYMENT INSTALLMENT APPROVED" },
                      new SelectListItem { Text = "PAYMENT INSTALLMENT REQUEST", Value = "PAYMENT INSTALLMENT REQUEST" },
                      new SelectListItem { Text = "PAYMENT MADE", Value = "PAYMENT MADE" },
                      new SelectListItem { Text = "PAYMENT MISSING", Value = "PAYMENT MISSING" },
                      new SelectListItem { Text = "PAYMENT REMINDER", Value = "PAYMENT REMINDER" },
                      new SelectListItem { Text = "PROMISE TO PAY", Value = "PROMISE TO PAY" },
                      new SelectListItem { Text = "RECALLED", Value = "RECALLED" },
                      new SelectListItem { Text = "REFUSE TO DE-REGISTER", Value = "REFUSE TO DE-REGISTER" },
                      new SelectListItem { Text = "REFUSE TO RENEW", Value = "REFUSE TO RENEW" },
                      new SelectListItem { Text = "RENEWAL DONE", Value = "RENEWAL DONE" },
                      new SelectListItem { Text = "RENEWAL INQUIRY", Value = "RENEWAL INQUIRY" },
                      new SelectListItem { Text = "RINGING", Value = "RINGING" },
                      new SelectListItem { Text = "STATEMENT OF ACCOUNT REQUEST", Value = "STATEMENT OF ACCOUNT REQUEST" },
                      new SelectListItem { Text = "SWITCH OFF", Value = "SWITCH OFF" },
                      new SelectListItem { Text = "THIRD PARTY CALLBACK", Value = "THIRD PARTY CALLBACK" },
                      new SelectListItem { Text = "THIRD PARTY CONTACT", Value = "THIRD PARTY CONTACT" },
                      new SelectListItem { Text = "THIRD PARTY CTC INFO UPDATE", Value = "THIRD PARTY CTC INFO UPDATE" }
                    }, new { @class = "form-control box dropdown-styled" })
                    @Html.ValidationMessageFor(model => model.Disposition, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3" id="Dropdown">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DispositionSecond, "Disposition", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.DispositionSecond, new List<SelectListItem>
                    {
                        new SelectListItem {  Text = "-", Value = "-"  },
                        new SelectListItem { Text = "BOUNCE CHEQUE NOTICE SENT", Value = "BOUNCE CHEQUE NOTICE SENT" },
                        new SelectListItem { Text = "EMAIL REPLY FROM CUSTOMER", Value = "EMAIL REPLY FROM CUSTOMER" },
                        new SelectListItem { Text = "RENEWAL REMINDER SENT", Value = "RENEWAL REMINDER SENT" },
                        new SelectListItem { Text = "GENERAL INQUIRY ", Value = "GENERAL INQUIRY " },
                        new SelectListItem { Text = "CUSTOMER'S EMAIL REPLIED", Value = "CUSTOMER'S EMAIL REPLIED" },
                    }, new { @class = "form-control box dropdown-styled" })
                    @Html.ValidationMessageFor(model => model.Disposition, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group col-sm-12 col-md-4 col-xl-3" id="Email" style="display:none;">
                <div class="row">
                    <div class="col-md-12">
                        @Html.Label("Email Used", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.DropDownList("EmailUsed", (IEnumerable<SelectListItem>)ViewBag.EmailUsed, new { @class = "form-control box dropdown-styled", @style="width:100%; height: 100%;"})
                    @Html.ValidationMessageFor(model => model.EmailUsed, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-sm-12 col-md-4 col-xl-3" id="Dialed" style="display:none;">
                <div class="row">
                    <div class="col-md-12">
                        @Html.Label("Dialed Number", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.DropDownList("DialedNumber", (IEnumerable<SelectListItem>)ViewBag.MobileOptions, new { @class = "form-control box dropdown-styled" })
                    @Html.ValidationMessageFor(model => model.DialedNumber, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group col-sm-12 col-md-4 col-xl-3" id="secondDropdown" style="display:none;">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.SubDisposition, "Subdisposition", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.SubDisposition, new List<SelectListItem>
                    {
                        new SelectListItem {  Text = "-", Value = "-"  },
                        new SelectListItem { Text = "English", Value = "English" },
                        new SelectListItem { Text = "Arabic", Value = "Arabic" },
                        new SelectListItem { Text = "Hindi", Value = "Hindi" },
                    }, new { @class = "form-control box dropdown-styled" })
                    @Html.ValidationMessageFor(model => model.SubDisposition, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group col-sm-12 col-md-4 col-xl-3" id="callbackDateTime" style="display:none;">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CallbackTime, "Callback", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.CallbackTime, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control box", type = "datetime-local", pattern = @"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}", title = "Please enter a valid datetime in the format yyyy-MM-ddTHH:mm" })
                    <!-- You can adjust the formatting and attributes as needed -->
                    @Html.ValidationMessageFor(model => model.CallbackTime, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.Comments, "Comments", htmlAttributes: new { @class = "control-label label" })

                @Html.TextArea("CommentsBox", new { @class = "form-control box", @style = "     max-width: 1200px;width: 100%; height: 150px; padding: 0px !important;" })
            </div>

            <div class="form-group col-sm-12 col-md-4" style="margin: 50px 0px;">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Submit" class="btn SubBtn" style="width:150px; height: 50px" />
                </div>
            </div>

            @Html.Label("History", htmlAttributes: new { @class = "control-label label" })
            <div style="overflow-x:auto; height: 400px; width: 100%;">
                <div id="History">

                </div>
            </div>




            <div class="form-group  col-sm-12 col-md-4 col-xl-12" style="display: none;">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ChangeStatus, "Change Status", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextAreaFor(model => model.ChangeStatus, new { @class = "form-control box", @style = "width: 100%; height: 100px; padding-top: 0;" })
                </div>
            </div>


        </div>
        }
    </div>
    <div style=" margin: 100px 0px 0px 50px;">

        <div class="card">
            <div class="card-details">
                <p class="text-title">Contact Info</p>
                <p class="para">
                    <b>Mobile Numbers</b>
                    <br />
                    @foreach (var mobileNumber in new[] { Model?.Mobile1, Model?.Mobile2, Model?.Mobile3, Model?.Mobile4 })
                    {
                        if (!string.IsNullOrEmpty(mobileNumber) && mobileNumber != "-")
                        {
                            <span class="editable-field" data-model-property="Mobile1">
                                <span class="value">@mobileNumber</span>
                                <img src="~/Content/Images/edit1.png" style="width: 12px; height: 12px; cursor: pointer;" class="edit-icon" />
                                <img src="~/Content/Images/copy.png" style="width: 12px; height: 12px; cursor: pointer;" class="copy-icon" data-value="@mobileNumber" />
                            </span>
                            <br />
                        }
                    }

                    <br />
                    <b>Email Ids</b>
                    <br />
                    @foreach (var email in new[] { Model?.Email_1, Model?.Email_2, Model?.Email_3 })
                    {
                        if (!string.IsNullOrEmpty(email) && email != "-")
                        {
                            <span class="editable-field" data-model-property="Email_1">
                                <span class="value">@email</span>
                                <img src="~/Content/Images/edit1.png" style="width: 12px; height: 15px; cursor: pointer;" class="edit-icon" />
                                <img src="~/Content/Images/copy.png" style="width: 12px; height: 12px; cursor: pointer;" class="copy-icon" data-value="@email" />
                            </span>
                            <br />
                        }
                    }
                </p>
            </div>
        </div>



        <script>
           $(document).ready(function () {
    $('.edit-icon').click(function () {
        var editableField = $(this).closest('.editable-field');
        var value = editableField.find('.value');
        var modelProperty = editableField.data('model-property');
        value.replaceWith('<input type="text" value="' + value.text() + '" class="editable-input" style="width:150px;">');
        editableField.find('.editable-input').focus().data('model-property', modelProperty);
    });

    $(document).on('blur', '.editable-input', function () {
        var editableField = $(this).closest('.editable-field');
        var input = $(this);
        var newValue = input.val();
        input.replaceWith('<span class="value">' + newValue + '</span>');
        // Here, you can send the updated value to the server using AJAX or handle it as needed
    });

    $(document).on('keydown', '.editable-input', function (e) {
        if (e.key === 'Enter' || e.keyCode === 13) {
            var editableField = $(this).closest('.editable-field');
            var input = $(this);
            var newValue = input.val();
            var modelProperty = input.data('model-property');
            var recordId = $('input[name="Id"]').val();

            input.replaceWith('<span class="value">' + newValue + '</span>');

            var dataToSend = {
                value: newValue,
                modelProperty: modelProperty,
                id: recordId
            };

            $.ajax({
                type: 'POST',
                url: '@Url.Action("EditInfo", "Home")',
                data: dataToSend,
                success: function (response) {
                    console.log(response);
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        }
    });

    $('.copy-icon').click(function () {
        var value = $(this).data('value');
        navigator.clipboard.writeText(value);
    });
});


        </script>
    </div>


</div>





<style>
    .card {
        width: 250px;
        height: 350px;
        border-radius: 20px;
        background: #f5f5f5;
        position: relative;
        border: 2px solid #c3c6ce;
        transition: 0.5s ease-out;
        overflow: visible;
        font-family: 'Jaldi', sans-serif;
        line-height: 1.2;
    }

    .card-details {
        color: black;
        height: 100%;
        gap: .5em;
        display: grid;
        place-content: center;
        padding: 10px;
    }

    .card-button {
        /*transform: translate(-50%, 125%);*/
        width: 60%;
        border-radius: 1rem;
        border: none;
        background-color: #008bf8;
        color: #fff;
        font-size: 1rem;
        padding: .5rem 1rem;
        position: absolute;
        left: 50%;
        bottom: 0;
        opacity: 0;
        transition: 0.3s ease-out;
    }

    .text-body {
        color: rgb(134, 134, 134);
    }

    /*Text*/
    .text-title {
        font-size: 1.5em;
        font-weight: bold;
    }
</style>