@using Microsoft.AspNet.Identity
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model  CRM_Raviz.Models.RecordData
@using CRM_Raviz.Models

<head>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")

    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Jaldi&display=swap');

        .heading {
            color: #082948;
            font-size: 40px;
            font-family: 'Jaldi', sans-serif;
            text-align: left;
            padding-left: 10px;
            font-weight: 600;
        }

        .label {
            color: #857F7F;
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            font-size: 15px;
            white-space: nowrap !important;
            width: 100px;
            white-space: nowrap;
        }

        .box {
            background-color: WHITE;
            border-style: none;
            width: 300px;
            height: 30px;
            margin-top: 7px;
            margin-bottom: 10px;
            border: 1px groove #569F9F;
            font-weight: 600 !important;
            font-size: 14px !important;
        }

        input, select, textarea {
            background-color: WHITE;
            font-size: 20px;
            max-width: 1000px;
        }

        .SubBtn {
            background-color: #082948 !important;
            color: white !important;
            font-family: 'Jaldi', sans-serif !important;
            font-size: 20px !important;
            border-radius: 4px !important;
        }

            .SubBtn:hover {
                background-color: #024444;
                color: white;
            }

        button.btn {
            color: white;
            font-weight: 500;
        }

        .body {
            display: flex;
            flex-direction: row;
        }

        .card {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 250px;
            border-radius: 24px;
            line-height: 1.2;
            transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
        }

        .content {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            height: max-content;
            gap: 24px;
            padding: 36px;
            border-radius: 22px;
            color: #ffffff;
            overflow: hidden;
            background: #082948;
            transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
        }

            .content::before {
                position: absolute;
                content: "";
                top: -4%;
                left: 50%;
                width: 90%;
                height: 90%;
                transform: translate(-50%);
                background: #0d467c;
                z-index: -1;
                transform-origin: bottom;
                border-radius: inherit;
                transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
            }

            .content::after {
                position: absolute;
                content: "";
                top: -8%;
                left: 50%;
                width: 80%;
                height: 80%;
                transform: translate(-50%);
                background: #e7ecff;
                z-index: -2;
                transform-origin: bottom;
                border-radius: inherit;
                transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
            }

            .content svg {
                width: 48px;
                height: 48px;
            }

            .content .para {
                z-index: 1;
                opacity: 1;
                font-size: 18px;
                transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
            }

            .content .link {
                z-index: 1;
                color: #fea000;
                text-decoration: none;
                font-family: inherit;
                font-size: 16px;
                transition: all 0.48s cubic-bezier(0.23, 1, 0.32, 1);
            }

                .content .link:hover {
                    text-decoration: underline;
                }

        .card:hover {
            transform: translate(0px, -16px);
        }

            .card:hover .content::before {
                rotate: -8deg;
                top: 0;
                width: 100%;
                height: 100%;
            }

            .card:hover .content::after {
                rotate: 8deg;
                top: 0;
                width: 100%;
                height: 100%;
            }

        .container.body-content {
            margin: 10px;
        }

        .para {
            font-family: 'Jaldi', sans-serif;
            text-align: left;
            padding-left: 10px;
        }

        table {
            width: 100%;
        }

        table tr td {
            font-family: 'Jaldi', sans-serif;
            font-size: 16px;
            border: 1px solid black;
            border-radius: 8px;
        }

        table tr th {
            border-radius: 8px;
        }

        td, th {
            padding: 8px;
            text-align: left;
            font-weight: 600;
            border-radius: 8px;
        }
    </style>

    <script>
        $(document).ready(function () {
            // Function to show or hide the second dropdown based on the selection of the first dropdown
            $('#Disposition').change(function () {
                var selectedValue = $(this).val();
                if (selectedValue === 'CALLBACK LANGUAGE') { // Replace 'YOUR_TRIGGER_OPTION' with the value that should trigger showing the second dropdown
                    $('#secondDropdown').show(); // Show the second dropdown
                } else {
                    $('#secondDropdown').hide(); // Hide the second dropdown
                }
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            // Function to show or hide the second dropdown based on the selection of the first dropdown
            $('#Disposition').change(function () {
                var selectedValue = $(this).val();
                if ((selectedValue === 'CALLBACK LANGUAGE') || (selectedValue === 'CALLBACK')) { // Replace 'YOUR_TRIGGER_OPTION' with the value that should trigger showing the second dropdown
                    $('#callbackDateTime').show(); // Show the second dropdown
                } else {
                    $('#callbackDateTime').hide(); // Hide the second dropdown
                }
            });
        });
    </script>



    <script>
        $(document).ready(function () {


            // Function to update the Change Status textarea
            function updateChangeStatus() {
                var username = $("#username").val();

                var changeStatusText = $("#ChangeStatus").val(); // Get the current text in the Change Status textarea

                // If the textarea is empty, set its value to the result of User.Identity.GetUserName() as the initial value
                if (changeStatusText.trim() === "") {
                    changeStatusText = "User => " + username + "\n";
                }

                // Loop through each textbox and append its name and changed value to the changeStatusText if it has changed
                $("input[type='text']").each(function () {
                    var textBoxName = $(this).attr("name");
                    var textBoxValue = $(this).val();
                    // Check if the value has changed since the last update
                    if ($(this).data("previous-value") !== textBoxValue) {
                        changeStatusText += textBoxName + " => " + textBoxValue + "\n";
                        // Update the previous value data attribute to the current value
                        $(this).data("previous-value", textBoxValue);
                    }
                });

                // Loop through each dropdown and append its name and selected option to the changeStatusText if it has changed
                $("select").each(function () {
                    var dropDownName = $(this).attr("name");
                    var dropDownValue = $(this).find("option:selected").text();
                    // Check if the value has changed since the last update
                    if ($(this).data("previous-value") !== dropDownValue) {
                        changeStatusText += dropDownName + " => " + dropDownValue + "\n";
                        // Update the previous value data attribute to the current value
                        $(this).data("previous-value", dropDownValue);
                    }
                });

                // Get the comments textarea value
                var commentsValue = $("#Comments").val();
                // Check if the comments value has changed since the last update
                if ($("#Comments").data("previous-value") !== commentsValue) {
                    changeStatusText += "Comments => " + commentsValue + "\n"; // Make sure to add a newline character after each change
                    // Update the previous value data attribute to the current value
                    $("#Comments").data("previous-value", commentsValue);
                }

                // Update the Change Status textarea with the generated text
                $("#ChangeStatus").val(changeStatusText);
            }

            // Call the updateChangeStatus function when a textbox loses focus
            $("input[type='text']").on("focusout", function () {
                updateChangeStatus();
            });

            // Call the updateChangeStatus function when a dropdown loses focus
            $("select").on("change", function () {
                updateChangeStatus();
            });

            // Call the updateChangeStatus function when the comments textarea loses focus
            $("#Comments").on("focusout", function () {
                updateChangeStatus();
            });

            // Call the updateChangeStatus function on page load to initialize the Change Status textarea
            updateChangeStatus();

            // Set the initial value of the Change Status textarea to empty
            $("#ChangeStatus").val("");
        });


    </script>







    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
</head>
<div class="body">
    <div>
        @using (Html.BeginForm("RealEditAllocation", "Home", null, FormMethod.Post, new { @class = "form-control", id = "Form", @style = "border: none !important;" }))
        {
            @Html.AntiForgeryToken()
        <div class="row space">

            <div class="heading">Update Record</div>
            <input type="hidden" id="username" value="@User.Identity.GetUserName()" />

            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Agent, new { Value = User.Identity.GetUserName() })
            @Html.HiddenFor(model => model.AccountNo)

            <br />

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.AccountNo, "Account Number", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.AccountNo, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerName, "Customer Name", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.CustomerName, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BCheque, "Bounced Cheque", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.BCheque, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BCheque_P, "Bounced Cheque Penalties", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.BCheque_P, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.IPTelephone_Billing, "IP Telephone Billing", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.IPTelephone_Billing, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Utility_Billing, "Utility Billing", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.Utility_Billing, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Others, "Others", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.Others, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.OS_Billing, "O/S Balance", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.OS_Billing, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.License_expiry, "License Expiry", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.License_expiry, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Nationality, "Nationality", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.Nationality, new { @class = "form-control box", @readonly = true })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-3">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Disposition, "Disposition", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Disposition, new List<SelectListItem>
                    {
                        new SelectListItem { Text = "NA", Value = "NA" },
                        new SelectListItem { Text = "THIRD PARTY CONTACT", Value = "THIRD PARTY CONTACT" },
                        new SelectListItem { Text = "BILL DISPUTE REFUSE TO PAY", Value = "BILL DISPUTE REFUSE TO PAY" },
                        new SelectListItem { Text = "BILL DISPUTE", Value = "BILL DISPUTE" },
                        new SelectListItem { Text = "BILL REQUEST", Value = "BILL REQUEST" },
                        new SelectListItem { Text = "LINE BUSY", Value = "LINE BUSY" },
                        new SelectListItem { Text = "CALLBACK", Value = "CALLBACK" },
                        new SelectListItem { Text = "CALLBACK LANGUAGE", Value = "CALLBACK LANGUAGE" },
                        new SelectListItem { Text = "THIRD PARTY CALLBACK", Value = "THIRD PARTY CALLBACK" },
                        new SelectListItem { Text = "SWICHTED OFF", Value = "SWICHTED OFF" },
                        new SelectListItem { Text = "DO NOT CALL", Value = "DO NOT CALL" },
                        new SelectListItem { Text = "FOLLOW UP", Value = "FOLLOW UP" },
                        new SelectListItem { Text = "CUSTOMER HUNG UP", Value = "CUSTOMER HUNG UP" },
                        new SelectListItem { Text = "INVALID NUMBER", Value = "INVALID NUMBER" },
                        new SelectListItem { Text = "CUSTOMER OUT OF COUNTRY", Value = "CUSTOMER OUT OF COUNTRY" },
                        new SelectListItem { Text = "PAYMENT MADE", Value = "PAYMENT MADE" },
                        new SelectListItem { Text = "PAYMENT FOLLOWUP", Value = "PAYMENT FOLLOWUP" },
                        new SelectListItem { Text = "PAYMENT INSTALLMENT REQUEST", Value = "PAYMENT INSTALLMENT REQUEST" },
                        new SelectListItem { Text = "PAYMENT PLAN APPROVED", Value = "PAYMENT PLAN APPROVED" },
                        new SelectListItem { Text = "PAYMENT REMINDER", Value = "PAYMENT REMINDER" },
                        new SelectListItem { Text = "PROMISE TO PAY", Value = "PROMISE TO PAY" },
                        new SelectListItem { Text = "RINGING", Value = "RINGING" },
                        new SelectListItem { Text = "REFUSE TO PAY", Value = "REFUSE TO PAY" },
                        new SelectListItem { Text = "STATEMENT OF ACCOUNT REQUEST", Value = "STATEMENT OF ACCOUNT REQUEST" },
                        new SelectListItem { Text = "SWITCH OFF", Value = "SWITCH OFF" },
                        new SelectListItem { Text = "PAYMENT MISSING", Value = "PAYMENT MISSING" }
                    }, new { @class = "form-control box dropdown-styled" })
                    @Html.ValidationMessageFor(model => model.Disposition, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-sm-12 col-md-4 col-xl-3" id="secondDropdown" style="display:none;">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.SubDisposition, "Subdisposition", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.SubDisposition, new List<SelectListItem>
                    {
                        new SelectListItem { Text = "NA", Value = "NA" },
                        new SelectListItem { Text = "English", Value = "English" },
                        new SelectListItem { Text = "Arabic", Value = "Arabic" },
                        new SelectListItem { Text = "Hindi", Value = "Hindi" },
                    }, new { @class = "form-control box dropdown-styled" })
                    @Html.ValidationMessageFor(model => model.SubDisposition, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-sm-12 col-md-4 col-xl-3" id="callbackDateTime" style="display:none;">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CallbackTime, "Callback", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.CallbackTime, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control box", type = "datetime-local", pattern = @"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}", title = "Please enter a valid datetime in the format yyyy-MM-ddTHH:mm" })
                    <!-- You can adjust the formatting and attributes as needed -->
                    @Html.ValidationMessageFor(model => model.CallbackTime, "", new { @class = "text-danger" })
                </div>
            </div>




            <div class="form-group  col-sm-12 col-md-4 col-xl-12">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.Comments, "Comments", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextAreaFor(model => model.Comments, new { @class = "form-control box", @style = "width: 100%; height: 100px;" })
                </div>
            </div>

            <div class="form-group  col-sm-12 col-md-4 col-xl-12">
                <div class="row">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ChangeStatus, "Change Status", htmlAttributes: new { @class = "control-label label" })
                    </div>
                </div>
                <div class="col-md-12">
                    @Html.TextAreaFor(model => model.ChangeStatus, new { @class = "form-control box", @style = "width: 100%; height: 100px; padding-top: 0;" })
                </div>
            </div>
            <div style=" padding: 20px 10px;">
                @{
                    var bouncedRecords = ViewBag.Bounce as List<BouncedRecord>;
                }
                <div>Bounced Details</div>
                <table>
                    <tr>
                        <td class="tableHead">Reason Code</td>
                        <td class="tableHead">Text</td>
                        <td class="tableHead">Date Bounced</td>
                        <td class="tableHead">Cheque Number</td>
                        <td class="tableHead">Cheque Date</td>
                        <td class="tableHead">Total Amount</td>
                    </tr>

                    @foreach (var item in bouncedRecords)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.ReasonCode, new { @class = "tablecont" })</td>
                            <td>@Html.DisplayFor(modelItem => item.Text, new { @class = "tablecont" })</td>
                            <td>@Html.DisplayFor(modelItem => item.DateBounced, new { @class = "tablecont" })</td>
                            <td>@Html.DisplayFor(modelItem => item.ChequeNumber, new { @class = "tablecont" })</td>
                            <td>@Html.DisplayFor(modelItem => item.ChequeDate, new { @class = "tablecont" })</td>
                            <td>@Html.DisplayFor(modelItem => item.TotalAmount, new { @class = "tablecont" })</td>

                        </tr>
                    }
                </table>
            </div>



            <div class="form-group col-sm-12 col-md-4" style="margin: 50px 0px;">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Submit" class="btn SubBtn" style="width:150px; height: 50px" />
                </div>
            </div>

        </div>
        }
    </div>
    <div style=" margin: 100px 0px 0px 50px;">
        <div class="card" style="border: none;">
            <div class="content">
                <svg fill="currentColor"
                     viewBox="0 0 24 24"
                     xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 9V5H4V9H20ZM20 11H4V19H20V11ZM3 3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3ZM5 12H8V17H5V12ZM5 6H7V8H5V6ZM9 6H11V8H9V6Z"></path>
                </svg>
                <p class="para">
                    <b>Mobile Numbers</b>
                    @Model.Mobile1 <!-- Assuming Model.Mobile1 contains the value -->
                    @Model.Mobile2 <!-- Assuming Model.Mobile2 contains the value -->
                    @Model.Mobile3 <!-- Assuming Model.Mobile3 contains the value -->
                    @Model.Mobile4 <!-- Assuming Model.Mobile4 contains the value -->
                    <br /> <br />
                    <b>Email Ids </b>
                    @Model.Email_1 <!-- Assuming Model.Email_1 contains the value -->
                    @Model.Email_2 <!-- Assuming Model.Email_2 contains the value -->
                    @Model.Email_3 <!-- Assuming Model.Email_3 contains the value -->
                </p>
            </div>
        </div>


    </div>


</div>





